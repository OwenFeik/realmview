[package]
name = "client"
authors = ["OwenFeik <owenhfeik@gmail.com>"]
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib"]

[dependencies]
scene = { path = "../scene" }
base64 = "0.13"
bincode = "1.3"
console_error_panic_hook = "0.1.7"
js-sys = "0.3"
serde = { version = "1", features = ["serde_derive"] }
serde_json = "1"
uuid = { version = "1.11.0", features = ["serde", "v7", "js"] }
wasm-bindgen = { version = "0.2", features = ["nightly", "serde-serialize"] }

[dependencies.web-sys]
version = "0.3"
features = [
    'BinaryType',             # Set WebSocket binary type
    'Blob',                   # Load files from disk
    'CloseEvent',             # Handle WebSocket close events
    'CssStyleDeclaration',    # Set CSS on created elements
    'Document',               # Access to document methods
    'DomTokenList',           # HTML element classList
    'Element',                # Create and work with nodes
    'ErrorEvent',             # WebSocket errors
    'Event',                  # Generic handling for user input
    'File',                   # Canvas direct upload functionality
    'FileList',               # Canvas direct upload functionality
    'FileReader',             # Load images from disk
    'Headers',                # Set request headers
    'HtmlCanvasElement',      # Create canvas for battlemap
    'HtmlElement',            # Create and manipulate elements
    'HtmlImageElement',       # Load images from URL
    'HtmlInputElement',       # Direct upload through canvas
    'InputEvent',             # Canvas direct upload functionality
    'KeyboardEvent',          # Handle keyboard input
    'Location',               # Read URL parameters from Window
    'MessageEvent',           # Receive and send WebSocket messages
    'MouseEvent',             # Interaction with canvas
    'ProgressEvent',          # Handle image loading events
    'Request',                # Send requests to save scene
    'RequestInit',            # Configure requests
    'Response',               # Receive responses
    'Url',                    # Create DataURLs for image loading
    'UrlSearchParams',        # Read URL parameters from Window
    'WebGlBuffer',            # WebGl2 buffers, for rendering
    'WebGlProgram',           # WebGl2 texture programs
    'WebGl2RenderingContext', # WebGl2 Context, for battlemap
    'WebGlShader',            # Shaders for WebGl2 programs
    'WebGlTexture',           # Textures for battlemap elements
    'WebGlUniformLocation',   # Work with WebGl2 programs
    'WebSocket',              # Connect to server
    'WheelEvent',             # Handle scrolling on battlemap
    'Window',                 # Access window globals
]
